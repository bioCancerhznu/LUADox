#=======================================================

#=======================================================

# Clear the workspace
rm(list=ls())

# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
set.seed(1234)

# Function to load and process pd.Rdata from a given directory
load_and_process_pd <- function(directory, dataset_name) {
  full_path <- paste0('D:\\s1datasets\\', directory)
  load(file.path(full_path, "pd.Rdata"))
  
  df <- pd
  df$dataset <- dataset_name
  subset(df, select = c("Sample", "dataset", "OS", "OS.Time"))
}

# Load and process all datasets
datasets <- c("GSE3141", "GSE13213", "GSE14814", "GSE26939", "GSE30219", 
              "GSE31210", "GSE37745", "GSE41271", "GSE42127", "GSE50081", 
              "GSE68465", "TCGA")
pdata <- do.call(rbind, lapply(datasets, function(ds) load_and_process_pd(ds, ds)))



table(pdata$dataset)

str(pdata)

setwd("D:\\s2pre")

write.csv(pdata, file = "pdata.csv")


#=======================================================

#=======================================================



# Function to process exprSet.Rdata from a given directory
process_dataset <- function(directory_path) {
  load(file.path(directory_path, "exprSet.Rdata"))
  exprSet <- as.data.frame(t(exprSet))
  
  # Convert expressions to binary based on median
  medians <- apply(exprSet, 2, median)
  binary_exprSet <- as.data.frame(lapply(1:ncol(exprSet), function(col_index) {
    ifelse(exprSet[, col_index] >= medians[col_index], 1, 0)
  }))
  
  # Update column and row names
  colnames(binary_exprSet) <- colnames(exprSet)
  rownames(binary_exprSet) <- rownames(exprSet)
  
  return(as.data.frame(t(binary_exprSet)))
}

# List of directories
base_path <- 'D:\\s1datasets'
directories <- paste0(base_path, "\\", datasets)

# Process each dataset
all_exprSets <- lapply(directories, process_dataset)
names(all_exprSets) <- datasets

# Find shared genes across all datasets
shared_genes <- Reduce(intersect, lapply(all_exprSets, rownames))




# Subset exprSets by shared genes and merge them
for(i in 1:length(all_exprSets)) {
  all_exprSets[[i]] <- all_exprSets[[i]][shared_genes, ]
}


# Convert row names to a new 'Gene' column for each data frame in the list
all_exprSets <- lapply(all_exprSets, function(df) {
  df$Gene <- rownames(df)
  return(df)
})

# Merge the data frames by the 'Gene' column
data <- Reduce(function(d1, d2) merge(d1, d2, by="Gene"), all_exprSets)

data[1:5,1:5]


getwd()

rownames(data) <- data$Gene

data$Gene <- NULL

data[1:5,1:5]

data <- as.data.frame(t(data))

data[1:5,1:5]


#=======================================================

#=======================================================

train_size <- floor(0.5 * nrow(data))

train_indices <- sample(1:nrow(data), train_size)

train_set <- data[train_indices, ]

test_set <- data[-train_indices, ]

train_set[1:5,1:5]

getwd()

setwd("D:\\s2pre")

save(train_set, file = "train_set.Rdata")

save(test_set, file = "test_set.Rdata")
